{"ast":null,"code":"var _jsxFileName = \"/Users/ppraew/Desktop/Project/imText/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { createWorker } from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [textResult, setTextResult] = useState(\"\");\n  const worker = createWorker();\n  const convertImageToText = useCallback(async () => {\n    if (!selectedImage) return;\n    await worker.load();\n    await worker.loadLanguage(\"eng\");\n    await worker.initialize(\"eng\");\n    const {\n      data\n    } = await worker.recognize(selectedImage);\n    setTextResult(data.text);\n  }, [worker, selectedImage]);\n  useEffect(() => {\n    convertImageToText();\n  }, [selectedImage, convertImageToText]);\n\n  const handleChangeImage = e => {\n    if (e.target.files[0]) {\n      setSelectedImage(e.target.files[0]);\n    } else {\n      setSelectedImage(null);\n      setTextResult(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ImText\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Gets words in image!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"upload\",\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"upload\",\n        accept: \"image/*\",\n        onChange: handleChangeImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(selectedImage),\n          alt: \"thumb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), textResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-p\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: textResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+AYvpdYRRr5pFMLragW0Ur43gGY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ppraew/Desktop/Project/imText/src/App.js"],"names":["useCallback","useEffect","useState","createWorker","App","selectedImage","setSelectedImage","textResult","setTextResult","worker","convertImageToText","load","loadLanguage","initialize","data","recognize","text","handleChangeImage","e","target","files","URL","createObjectURL"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMO,MAAM,GAAGN,YAAY,EAA3B;AAEA,QAAMO,kBAAkB,GAAGV,WAAW,CAAC,YAAY;AACjD,QAAG,CAACK,aAAJ,EAAmB;AACnB,UAAMI,MAAM,CAACE,IAAP,EAAN;AACA,UAAMF,MAAM,CAACG,YAAP,CAAoB,KAApB,CAAN;AACA,UAAMH,MAAM,CAACI,UAAP,CAAkB,KAAlB,CAAN;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,MAAM,CAACM,SAAP,CAAiBV,aAAjB,CAAvB;AACAG,IAAAA,aAAa,CAACM,IAAI,CAACE,IAAN,CAAb;AACD,GAPqC,EAOnC,CAACP,MAAD,EAASJ,aAAT,CAPmC,CAAtC;AASAJ,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACL,aAAD,EAAgBK,kBAAhB,CAFM,CAAT;;AAIA,QAAMO,iBAAiB,GAAGC,CAAC,IAAI;AAC7B,QAAGA,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAH,EAAsB;AACpBd,MAAAA,gBAAgB,CAACY,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAAhB;AACD,KAFD,MAEO;AACLd,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AAA+B,QAAA,MAAM,EAAC,SAAtC;AAAgD,QAAA,QAAQ,EAAES;AAA1D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,iBACGZ,aAAa,iBACZ;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACE;AAAK,UAAA,GAAG,EAAEgB,GAAG,CAACC,eAAJ,CAAoBjB,aAApB,CAAV;AAA8C,UAAA,GAAG,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFJ,EAMGE,UAAU,iBACT;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE;AAAA,oBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAnDQH,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { createWorker } from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [textResult, setTextResult] = useState(\"\");\n\n  const worker = createWorker();\n\n  const convertImageToText = useCallback(async () => {\n    if(!selectedImage) return;\n    await worker.load();\n    await worker.loadLanguage(\"eng\");\n    await worker.initialize(\"eng\");\n    const { data } = await worker.recognize(selectedImage);\n    setTextResult(data.text);\n  }, [worker, selectedImage]);\n\n  useEffect(() => {\n    convertImageToText();\n  }, [selectedImage, convertImageToText])\n\n  const handleChangeImage = e => {\n    if(e.target.files[0]) {\n      setSelectedImage(e.target.files[0]);\n    } else {\n      setSelectedImage(null);\n      setTextResult(\"\")\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>ImText</h1>\n      <p>Gets words in image!</p>\n      <div className=\"input-wrapper\">\n        <label htmlFor=\"upload\">Upload Image</label>\n        <input type=\"file\" id=\"upload\" accept='image/*' onChange={handleChangeImage} />\n      </div>\n\n      <div className=\"result\">\n        {selectedImage && (\n          <div className=\"box-image\">\n            <img src={URL.createObjectURL(selectedImage)} alt=\"thumb\" />\n          </div>\n        )}\n        {textResult && (\n          <div className=\"box-p\">\n            <p>{textResult}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}